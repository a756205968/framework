概念
	核心主要两部分：
		aop：面向切面编程，扩展功能不是修改源代码实现
		ioc：控制反转，比如有一个类，类里面有一个普通方法（非静态），调用方法需要创建对象，然后用对象调用。而ioc不是通过创建对象来调用，而是用spring进行配置创建对象
	spring是一站式框架：
		spring在javaee中三层结构中，每一层都提供了不同的解决方式。
			web层：springMVC
			service层：ioc
			dao层：spring的jdbcTemplate
Spring的ioc操作
	1.把对象的创建交给spring进行管理
	2.ioc操作两部分
		(1).ioc的配置文件方式
		(2).ioc的注解方式
ioc底层原理
	1.ioc底层原理使用技术
		(1)xml配置文件
		(2)dom4j解析xml
		(3)工厂设计模式
		(4)反射
ioc入门案例
	1.导包
		解压spring，里面一个jar，一个文档，一个源码，导入核心包就行：Beans Core Context expression,日志jar：
	2.创建类，在类里面创建方法
	3.创建spring配置文件，配置创建的类
		名称和位置不是固定的，一般放在src下，applicationContext.xml
		引入约束：D:\Soft\JarPackage\spring\spring-framework-4.2.4.RELEASE\docs\spring-framework-reference\html里面的最后一个文件，用浏览器打开，从后往前找
		<beans xmlns="http://www.springframework.org/schema/beans"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="
				http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
			<bean id="user" class="ioc.User"></bean>		//id建议为类名小写，class为包名.类名
		</beans>
	4.写代码测试对象的创建 
		//1.加载spring配置文件，创建对象
		ApplicationContext context=new ClassPathXmlApplicationContext("bean1.xml");
		//2.得到配置创建的对象,传id值，返回User对象
		User user=(User)context.getBean("user");
配置文件没有提示问题：上网搜索
bean实例化三种方式
	1.使用类的无参数构造创建
		如果类里面没有无参构造，会出现异常
	2.静态工厂创建
	3.实例工厂创建
<bean>中属性的介绍
	id:起的唯一标识符，只能英文
	class:创建对象所在类的全路径
	name:作用和id一样，但可以包含特殊符号，一般不用			//参考html里面的id和name
	scope:作用范围
		singleton:默认值，单例
		prototype:多例
属性注入：向类里面的属性设置值
注入对象类型属性
	创建service类和dao类，在service中得到dao对象
		a.在service里面把dao作为类型属性
		b.生成dao类型的set方法
			<bean id="userDao" class="类名.包名"></bean>
			<bean id="userService" class="类名.包名">
				<property name="userDao" ref="userDao"></property>	//name为service类里面的属性名称。不写value，写ref(引用id)
			</bean>
使用set方法注入属性：
	<bean id="book" class="全路径">
		<property name="bookname" value="小兰的人生故事"></property>
	</bean>
使用有参构造注入属性：
	<bean id="demo" class="全路径">
		<constructor-arg name="属性名" value="属性值"></constructor-arg>
	</bean>
注入复杂类型属性
	1.数组
	<bean id="person" class="包名.类名">
		<property name="属性名字">
			<lsit>
				<value>小王</value>
				<value>小蓝</value>
				<value>小兰</value>
				<value>小禹</value>
			</list>
		</property>
	</bean>
	2.list集合
	<property name="属性名字">
			<lsit>
				<value>小王</value>
				<value>小蓝</value>
				<value>小兰</value>
				<value>小禹</value>
			</list>
		</property>
	3.map集合
		<property name="属性名字">
			<map>
				<entry key="aa" value="小王"></entry>
				<entry key="bb" value="小王"></entry>
				<entry key="cc" value="小王"></entry>
				<entry key="dd" value="小王"></entry>
			</map>
		</property>
	4.properties类型
		<property name="属性名字">
			<props>
				<prop key="xx">yy</prop>
			</props>
		</property>
IOC和DI区别
	IOC：控制反转，把对象的创建交给spring进行配置
	DI:依赖注入，向类属性中设置值
	关系：依赖注入不能单独存在，需要在ioc的基础上完成
spring整合web项目原理
	1.加载核心配置文件
	ApplicationContext context=new ClassPathXmlApplicationContext("bean1.xml");
	需要new对象，但效率低。
	2.解决思想：加载配置文件和创建对象的过程，在服务器启动时候完成
	3.实现原理
		a.ServletContext对象
		b.监听器
		c.具体使用
		在服务器启动的时候，为每个项目创建ServletContext对象
		在ServletContext对象创建的时候，使用监听器可以具体得到ServletContext对象在什么时候创建
		使用监听器监听到ServletContext对象创建时，加载spring的配置文件，把配置文件的对象进行创建
		把创建出来的对象放到ServletContext域对象里面(setAttribute方法)
		获取对象的时候，到ServletContext域得到（getAttribute方法）