基于aspectj的注解aop
	1.创建对象——配置文件或者注解，参照前面
	2.在spring核心配置文件中，开启aop扫描
		<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	3.在增强类上面使用注解
		类上面加注解：@Aspect
		方法上面加注解：@Before(value="execution(* aop.Book.*(..))")
jdbc模板操作
	1.spring框架是一站式框架
		javaee三层，每层都有解决技术——dao：jdbcTemplate
	2.spring对不同持久化层技术都进行了封装
		jdbcTemplate就是对jdbc进行了封装
	3.jdbcTemplate的使用，对数据库进行crud的操作
		添加
			导入jar：spring-jdbc，spring-tx
			创建一个对象，设置数据库信息
				DriverManagerDataSource dataSource = new DriverManagerDataSource();
				dataSource.setDriverClassName("com.mysql.jdbc.Driver");
				dataSource.setUrl("jdbc:mysql:///test");
				dataSource.setUsername("root");
				dataSource.setPassword("root");
			创建一个jdbcTemplate对象。设置数据源
				JdbcTemplate jdbcTemplate=new JdbcTemplate(dataSource);
			调用jdbcTemplate对象的方法，实现操作
				String sql="insert into user(username,password) values(?,?)";
				int rows=jdbcTemplate.update(sql,"lanzhihao","dashuaige");
		修改
			String sql="update user set password=? where username=?";		//其余部分一样
		删除
			String sql="delete from user where username=?";		//其余部分一样
		查询：有接口，但没有实现类，得到不同类型的数据需要自己进行封装
			查询返回某一个值
			//第二个参数为返回类型的class，比如本例子返回Integer
			jdbcTemplate.queryForObject(sql, Integer.class);
			查询返回对象
			String sql="select * from user where username=?";
			User user=jdbcTemplate.queryForObject(sql,new MyRowMapper(),"lucy");					//第一个参数是sql语句，第二个RowMapper，是接口，需要自己实现一个类，实现接口（匿名内部类或再写个类）。第三个是可变参数，是sql中传的值
			class MyRowMapper implements RowMapper<User>{
				public User mapRow(ResultSet rs,int num)throws SQLException{
					//1.从结果集得到数据
					String username=rs.getString("username");
					String password=rs.getString("password");
					//2.把数据封装到对象
					User user=new User();
					user.setUsername(username);
					user.setPassword(password);

					return user;
				}
			}
			//查询返回list集合				就方法和上面不同
			String sql="select * from user";
			List<User> list=jdbcTemplate.query(sql,new RowMapper);		//1.sql语句。2.RowMapper接口。3.可变参数
			class MyRowMapper implements RowMapper<User>{
				public User mapRow(ResultSet rs,int num)throws SQLException{
					//1.从结果集得到数据
					String username=rs.getString("username");
					String password=rs.getString("password");
				
					//2.把数据封装到对象
					User user=new User();
					user.setUsername(username);
					user.setPassword(password);

					return user;
				}
			}
用spring配置实现
	1.spring配置连接池，c3p0连接池
		a.导入jar,c3p0,mchang
		b.创建spring配置文件，配置连接池
			<bean id="" class="com.mchange.v2.c3p0.ComboPooledDataSource"></bean>
			//注入属性
			<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
			<property name="jdbcUrl" value="jdbc:mysql:///spring_day03"></property>
			<property name="user" value="root"></property>
			<property name="password" value="root"></property>
	2.dao使用jdbcTemplate
	service中注入dao，dao中注入jdbcTemplate,jdbcTemplate中注入dataSource
spring的事务介绍
		1.编程式事务管理（不用）
		2.声明式事务管理
			a.基于xml配置实现
			b.基于注解实现
	spring事务管理api
		接口：事务管理器：PlatformTransactionManager
		spring为不同持久化框架提供不同的实现类
			jdbcTemplate,iBatis:org.springframework.jdbc.datasouce.DataSourceTransactionManager
			hibernate:org.springframework.orm.hibernate5.HibernateTransactionManager
		首先要配置事务管理器
声明式事务管理（xml）
	使用的aop思想
	1.配置事务管理器
	<bean id="transactionManager" class="DataSourceTransactionManager的全路径">
		注入datasource
		<property name="dataSource" ref="连接池数据源"></property>
	</bean>
	2.配置事务增强
	<tx:advice id="txadvice" transaction-manager="transactionManager">
		事务操作
		<tx:attributes>
			设置进行事务操作的方法匹配规则
			<tx:method name="account*"/>
			<tx:method name="insert*"/>
		</tx:attributes>
	</tx:advice>
	3.配置切面
	<aop:config>
		切入点
		<aop:pointcut expression="execution(* 类名全路径.*(..))" id="pointcut1"/>
		切面
		<aop:advisor advice-ref="txadvice" pointcut-ref="pointcut1"/>
	</aop:config>
声明式事务管理器（注解实现）
	1.配置事务管理器
	2.配置事务注解
	<tx:annotation-driven transaction-manager="transactionManager"/>
	3.要使用事务方法所在类上面添加注解
	@Transactional